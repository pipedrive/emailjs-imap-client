"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parserHelper = void 0;
var _common = require("./common");
var _emailjsImapHandler = require("emailjs-imap-handler");
const isUnexpectedCharError = e => e && e.message && e.message.toLowerCase().indexOf('unexpected char at position') !== -1;

// according to the https://www.rfc-editor.org/rfc/rfc2047
const encodedWordsRegex = /=\?[^?]+\?[^?]+\?(.+?)\?=/ig;
const serverBugRegex = /(.+NO\s+\[SERVERBUG])(.+)/i;
const commandNotAllowedStringCharacter = /[^a-zA-Z-.0-9_: ]/ig;
const sanitizeEncodedWords = command => {
  const allMatches = command.matchAll(encodedWordsRegex);
  let changedCommand = command;
  for (const match of allMatches) {
    if (match.length !== 2) {
      continue;
    }
    if (match[1].indexOf('"') === -1) {
      continue;
    }
    const repl = match[1].replaceAll(/"/ig, '');
    changedCommand = changedCommand.replace(match[1], repl);
  }
  return changedCommand;
};
const sanitizeServerBug = command => {
  const foundMatch = serverBugRegex.exec(command);
  if (foundMatch.length !== 3) {
    return command;
  }
  return [foundMatch[1], foundMatch[2].replaceAll(commandNotAllowedStringCharacter, '').trim()].join(' ');
};
const parsingHacks = [{
  // parsing hack in situation when last character breaks parsing
  func: (command, opts) => (0, _emailjsImapHandler.parser)(command.slice(0, -1), opts),
  condition: (command, e) => e && e.message === `Unexpected char at position ${command.length - 1}` && typeof command.slice === 'function'
}, {
  // parsing hack which is caused by provider returning command with two sequential double quotes ""
  func: (command, opts) => (0, _emailjsImapHandler.parser)((0, _common.toTypedArray)((0, _common.fromTypedArray)(command).replaceAll(/""/ig, '"')), opts),
  condition: (command, e) => isUnexpectedCharError(e)
}, {
  // parsing hack which is caused by provider returning command with encoded-words with quotes in ATOM instructions
  func: (command, opts) => (0, _emailjsImapHandler.parser)((0, _common.toTypedArray)(sanitizeEncodedWords((0, _common.fromTypedArray)(command))), opts),
  condition: (command, e) => isUnexpectedCharError(e) && (0, _common.fromTypedArray)(command).search(encodedWordsRegex) !== -1
}, {
  // parsing hack which is caused by provider returning NO [SERVERBUG] unparseable message
  func: (command, opts) => (0, _emailjsImapHandler.parser)((0, _common.toTypedArray)(sanitizeServerBug((0, _common.fromTypedArray)(command))), opts),
  condition: (command, e) => isUnexpectedCharError(e) && (0, _common.fromTypedArray)(command).search(serverBugRegex) !== -1
}];
const parserHelper = (command, opts) => {
  try {
    return (0, _emailjsImapHandler.parser)(command, opts);
  } catch (e) {
    for (let i = 0; i < parsingHacks.length; i++) {
      const attempt = parsingHacks[i];
      if (!attempt.condition(command, e)) {
        continue;
      }
      try {
        return attempt.func(command, opts);
      } catch (e) {}
    }
    throw e;
  }
};
exports.parserHelper = parserHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,